/*See the License for the specific language governing permissions and
limitations under the License.

Copyright 2022 Google LLC. This solution, including any related sample code or data, is made available on an “as is,” “as available,” and “with all faults” basis, solely for illustrative purposes, and without warranty or representation of any kind. This solution is experimental, unsupported and provided solely for your convenience. Your use of it is subject to your agreements with Google, as applicable, and may constitute a beta feature as defined under those agreements.  To the extent that you make any data available to Google in connection with your use of the solution, you represent and warrant that you have all necessary and appropriate rights, consents and permissions to permit Google to use and process that data.  By using any portion of this solution, you acknowledge, assume and accept all risks, known and unknown, associated with its usage, including with respect to your deployment of any portion of this solution in your systems, or usage in connection with your business, if at all.*

 * @name Spamming Placements
 *
 * @overview Alerts about placements (YT channels) which underperform.
 *
 * @author eladb@, xingj@
 * 2022/07/13
 * 
 */

var SPREADSHEET_URL = wholeSpreadsheet.getUrl();
var emails;

var currentCustomerId;
var GO_BACK_DAYS_EARLY;
var GO_BACK_DAYS_LATE;

var EMAIL_SUBJECT;
var fromDate;
var toDate;

const MAX_GADS_IDS = 500;
const MICROS_CONVERSION = 1000000;

const METRICS_API_ENGLISH = {
  display_name: "Display Name",
  displayName: "YT Display Name",
  placement: "Placement",
  placement_type: "Placement Type",
  placementType: "YT Placement Type",
  resource_name: "Resource Name",
  target_url: "Target URL",
  targetUrl: "YT Target URL",
  active_view_cpm: "Active View CPM",
  active_view_ctr: "Active View CTR",
  active_view_impressions: "Active View Impressions",
  active_view_measurability: "Active View Measurability",
  active_view_measurable_cost_micros: "Active View Measurable Cost",
  active_view_measurable_impressions: "Active View Measurable Impressions",
  active_view_viewability: "Active View Viewability",
  all_conversions: "All Conversions",
  all_conversions_from_interactions_rate: "All Conversions From Interactions Rate",
  all_conversions_value: "All Conversions Value",
  all_conversions_value_per_cost: "All Conversions Value Per Cost",
  average_cost: "Average Cost",
  average_cpc: "Average CPC",
  average_cpe: "Average CPE",
  average_cpm: "Average CPM",
  averageCpm: "Google Ads Average CPM",
  average_cpv: "Average CPV",
  clicks: "Clicks",
  conversions: "Conversions",
  conversions_from_interactions_rate: "Conversions from Interactions Rate",
  conversions_value: "Conversions Value",
  cost_micros: "Cost",
  costMicros: "Google Ads Cost",
  cost_per_all_conversions: "Cost Per All Conversions",
  cost_per_conversion: "Cost Per Conversions",
  cross_device_conversions: "Cross Device Conversions",
  ctr: "CTR",
  engagement_rate: "Engagement Rate",
  engagements: "Engagements",
  impressions: "Impressions",
  interaction_event_types: "Interaction Event Types",
  interaction_rate: "Interaction Rate",
  interactions: "Interactions",
  value_per_all_conversions: "Value Per All Conversions",
  value_per_conversion: "Value Per Conversions",
  video_view_rate: "Video View Rate",
  videoViewRate: "Google Ads Video View Rate",
  video_views: "Video Views",
  videoViews: "Google Ads Video Views",
  view_through_conversions: "View Through Conversions"
};

const METRICS_MICROS = [
  "metrics.active_view_cpm",
  "metrics.active_view_measurable_cost_micros",
  "metrics.all_conversions_value_per_cost",
  "metrics.average_cost",
  "metrics.average_cpc",
  "metrics.average_cpe",
  "metrics.average_cpm",
  "metrics.average_cpv",
  "metrics.cost_micros",
  "metrics.cost_per_all_conversions",
  "metrics.cost_per_conversion",
  "metrics.value_per_all_conversions",
  "metrics.value_per_conversion",
];

const METRICS_ENGLISH_API = {};
Object.keys(METRICS_API_ENGLISH).forEach(api => {
  METRICS_ENGLISH_API[METRICS_API_ENGLISH[api].toLowerCase()] = "metrics." + api;
});

//Get Google Ads data in MAX_GADS_IDS# of chunks, then run the gadschannelidsovermax to see if it needs to continue 
function getGAdsData(currentSheetName) {
  var adsDataStatusRange = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.RUNNING);
  currentCustomerId = currentSheetName.substring(0, currentSheetName.indexOf('_'));
  GO_BACK_DAYS_EARLY = (wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GO_BACK_DAYS_EARLY)).getValue();
  GO_BACK_DAYS_LATE = (wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GO_BACK_DAYS_LATE)).getValue();
  fromDate = getDateStringForMinusDays(-1 * GO_BACK_DAYS_EARLY);
  toDate = getDateStringForMinusDays(GO_BACK_DAYS_LATE);
  EMAIL_SUBJECT = (wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.EMAIL_SUBJECT)).getValue();

  // Run queries for each of the queries entered in the spreadsheet if queries entered
  var gadsOrClauses = (wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.METRICS_FILTERS)).getValues().filter(String);
  var currentGadsFilter = "";
  if (gadsOrClauses.length != 0) {
    //one by one. Call the API. Fetch the results in chuncks. When finised reading all chunks for current filer-row, incrememnt the GAds filter row.
    currentGadsFilter = translateNextGadsFilter(currentSheetName, gadsOrClauses);
  }
  else {
    SpreadsheetApp.getActiveSpreadsheet().toast('No G-Ads filters','💡 Warning!');
  }
  var urlToRowInGroupPlacementView = {};
  //Query for results
  urlToRowInGroupPlacementView = callApiToFillDict(urlToRowInGroupPlacementView, currentGadsFilter, currentSheetName);
  //Write results to sheet and send email of results
  if (Object.keys(urlToRowInGroupPlacementView).length > 0) {
    writeDataToGoogleSheet(urlToRowInGroupPlacementView);
  }
  else{
    adsDataStatusRange.setValue(SCRIPT_STATUS_VALUES.DONE);
  }
}

function isGadsWorkSplitNeeded(currentSheetName) {
  //If there is a next page token, there are more channels to get GAds data for than in current channel chunk, create trigger to continue in 5 min and avoid timeout
  //If gadsQueryNumber is not 0, there are more queries to run after this one, create trigger to continue in 5 min and run the next query
  var nextPageToken = (wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_NEXT_PAGE_TOKEN).getValue()).toString().trim();
  var gadsOrClauses = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_TOTAL_OR).getValue();
  var gadsCurrentOr = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_CURRENT_OR).getValue();

  var hasMoreChunksForCurrentOr = nextPageToken.length > 1;
  var hasMoreOrClauses = (gadsOrClauses > gadsCurrentOr);
  return hasMoreOrClauses || hasMoreChunksForCurrentOr;
}

function getDateStringForMinusDays(numDays) {
  var expectedDate = new Date(new Date().setDate(new Date().getDate() + numDays));
  return { 'query_date': getDateStringInTimeZone('yyyy-MM-dd', expectedDate), 'sheet_date': getDateStringInTimeZone('dd/MM/YY', expectedDate) };
}

/**
 * Produces a formatted string representing a given date in a given time zone.
 *
 * @param {string} format A format specifier for the string to be produced.
 * @param {date} date A date object. Defaults to the current date.
 * @param {string} timeZone A time zone. Defaults to the account's time zone.
 * @return {string} A formatted string of the given date in the given time zone.
 */
function getDateStringInTimeZone(format, date, timeZone) {
  date = date || new Date();
  timeZone = timeZone || wholeSpreadsheet.getSpreadsheetTimeZone();
  return Utilities.formatDate(date, timeZone, format);
}

//Changing human readable query terms to API readable query terms
function translateEnglishToApi(englishText) {
  var englishValues = Object.keys(METRICS_ENGLISH_API);
  englishValues.sort((a, b) => b.length - a.length);
  const reg = new RegExp(englishValues.join('|'), 'gi');

  ///reg = "all conversions from interactions rate|active view measurable impressions|conversions from interactions rate|all conversions value per cost|active view measurable cost|google ads video view rate|act…"
  //Loop of match - replace.

  //for every word checks matching.
  return englishText.toString().replaceAll(reg, matched_english => METRICS_ENGLISH_API[matched_english.toLowerCase()]);
}

//Changing human readable cost digits to API readable micros
function microsToCurrency(query) {
  var query = query.toLowerCase();
  const regexFormatCheckerisMicros = new RegExp(METRICS_MICROS.join('|'));
  //Multiple metrics joined by AND
  if (query.includes("and")) {
    var individualQueriesArray = query.split(" and ");
    for (let i = 0; i < individualQueriesArray.length; i++) {
      if (regexFormatCheckerisMicros.test(individualQueriesArray[i])) {
        individualQueriesArray[i] = queryToMicros(individualQueriesArray[i]);
      }
    }
    query = individualQueriesArray.join(" AND ");
  }
  //Only 1 metric being filtered, no AND statement
  else if (regexFormatCheckerisMicros.test(query)) {
    query = queryToMicros(query);
  }
  return query;
}

function queryToMicros(query) {
  var individualQueryWordArray = query.split(" ");
  individualQueryWordArray[2] = individualQueryWordArray[2] * 1000000;
  var microsQuery = individualQueryWordArray.join(" ");
  return microsQuery;
}

function translateNextGadsFilter(currentSheetName, gadsOrClauses) {
  //Get values for metrics filters 

  var currentGAdsOrClauseIndex = (wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_CURRENT_OR).getValue());
  Logger.log("Currently on GAds " + currentGAdsOrClauseIndex + " OR clause out of " + (gadsOrClauses.length - 1));
  var metricsFiltersQuery = microsToCurrency(translateEnglishToApi(gadsOrClauses[currentGAdsOrClauseIndex]));

  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_CURRENT_OR).setValue(currentGAdsOrClauseIndex + 1);
  return metricsFiltersQuery;
}

function callApiToFillDict(urlToRowInGroupPlacementView, conditionRow, currentSheetName) {
  //YT channel  
  //https://developers.google.com/google-ads/api/fields/v10/group_placement_view  

  var query = 'SELECT \
    customer.id,\
    customer.descriptive_name,\
    group_placement_view.placement_type,\
    group_placement_view.display_name,\
    group_placement_view.placement,\
    group_placement_view.target_url,\
    metrics.impressions,\
    metrics.cost_micros,\
    metrics.conversions,\
    metrics.video_views,\
    metrics.video_view_rate,\
    metrics.clicks,\
    metrics.average_cpm,\
    metrics.ctr\
 FROM group_placement_view\
 WHERE\
    group_placement_view.placement_type IN ("YOUTUBE_CHANNEL")\
    AND campaign.advertising_channel_type = "VIDEO"\
    AND segments.date BETWEEN "'+ fromDate.query_date + '" AND "' + toDate.query_date + '"';
  if (conditionRow != "") {
    query = query + ' AND ' + conditionRow;
  }
  query = query.replace(/\s+/g, ' ').trim();
  Logger.log("GAds query: " + query);
  var reportRows = runGAdsReport(query, currentSheetName);
  //If query did not return any results, return empty accountDict
  if (reportRows.length == 0) {
    Logger.log("GAds returned no results");
    SpreadsheetApp.getActiveSpreadsheet().toast('No G-Ads results','💡 Warning!',TOAST_DISPALY_TIME);
    return urlToRowInGroupPlacementView;
  }
  return populateStatsDict(urlToRowInGroupPlacementView, reportRows);
}

function populateStatsDict(urlToRowInGroupPlacementView, rows) {
  for (let i = 0; i < rows.length; i++) {
    var row = rows[i];
    var url = row['groupPlacementView.targetUrl'];
    if (!urlToRowInGroupPlacementView.hasOwnProperty(url)) {
      urlToRowInGroupPlacementView[url] = {
        "groupPlacementView.placement_type": row["groupPlacementView.placementType"],
        "groupPlacementView.display_name": row["groupPlacementView.displayName"],
        "groupPlacementView.placement": row["groupPlacementView.placement"],
        "groupPlacementView.targetUrl": row["groupPlacementView.targetUrl"],
        "metrics.impressions": 0,
        "metrics.costMicros": 0,
        "metrics.conversions": 0,
        "metrics.videoViews": 0,
        'metrics.videoViewRate': 0,
        'metrics.clicks': 0,
        'metrics.averageCpm': 0,
        'metrics.ctr': 0
      };
      accumulateReportRow(row, urlToRowInGroupPlacementView[url]);
    }

  }
  return urlToRowInGroupPlacementView;
}

function accumulateReportRow(row, acc) {
  //https://developers.google.com/adwords/api/docs/guides/reporting Fields of type Money are returned in micro currency units (micros). To convert, divide by MICROS_CONVERSION const.
  acc["metrics.impressions"] += toFloat(row['metrics.impressions']);
  acc["metrics.costMicros"] += toFloat(row['metrics.costMicros']) / MICROS_CONVERSION;
  acc["metrics.conversions"] += toFloat(row['metrics.conversions']);
  acc["metrics.videoViews"] += toFloat(row['metrics.videoViews']);
  acc['metrics.videoViewRate'] += toFloat(row['metrics.videoViewRate']);
  acc['metrics.clicks'] += toFloat(row['metrics.clicks']);
  acc['metrics.averageCpm'] += toFloat(row['metrics.averageCpm']) / MICROS_CONVERSION;
  acc['metrics.ctr'] += toFloat(row['metrics.ctr']);
}

function toFloat(value) {
  if (!value) return 0;
  value = value.toString().replace(/,/g, '');
  return parseFloat(value);
}

function writeDataToGoogleSheet(urlToRowInGroupPlacementView) {
  var currentSheetName = wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).getValue();
  var currentSheet = wholeSpreadsheet.getSheetByName(currentSheetName);


  var adsDataStatusRange = wholeSpreadsheet.getRangeByName(currentSheetName + "!" + CONSTS.GADS_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.RUNNING);

  var newChannelRow = [];
  var headers = ["None"];
  for (var i in urlToRowInGroupPlacementView) {
    var item = urlToRowInGroupPlacementView[i];
    headers = Object.keys(item);
    break;
  }
  for (var i in urlToRowInGroupPlacementView) {
    var item = urlToRowInGroupPlacementView[i];
    newChannelRow[i] = Object.keys(item).map(function (key) {
      return item[key];
    });
  }

  // Set headers
  // Translate API syntax to human syntax for headers
  headers = headers.map(x => METRICS_API_ENGLISH[x.split(".").pop()]);
  headersRange = wholeSpreadsheet.getRangeByName(currentSheetName + "!" + CONSTS.HEADERS);  
  var range = currentSheet.getRange(headersRange.getRow(), headersRange.getColumn(), 1, headers.length);
  range.setValues([headers]);

  var currentSheet = wholeSpreadsheet.getSheetByName(currentSheetName);
  var newStartingRow = currentSheet.getLastRow() + 1;
  if (Object.keys(newChannelRow).length > 0) {
    //Get current channel IDs before adding new ones so that we only exclude new IDs
    var channelsAlreadyInTheTrix1 = wholeSpreadsheet.getRangeByName(currentSheetName + "!" + CONSTS.CHANNEL_IDS_COL).getValues().filter(String);
    var channelsAlreadyInTheTrix = wholeSpreadsheet.getRangeByName(currentSheetName + "!" + CONSTS.CHANNEL_IDS_COL).getValues().filter(String).map(function (arr) { return arr[0] });
    var deduplicatedChannelIds = [];
    //GAds splits by tokens
    var nextPageToken = (wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_NEXT_PAGE_TOKEN).getValue()).toString().trim().length;


  channelIdsHeader = wholeSpreadsheet.getRangeByName(currentSheetName + "!" + CONSTS.CHANNEL_IDS_HEADER);
    //Only add Channel IDs that aren't already in the output table
    for (let i = 0; i < Object.keys(newChannelRow).length; i++) {
      if (!(channelsAlreadyInTheTrix.includes((Object.entries(newChannelRow)[i][1][headers.indexOf(channelIdsHeader.getValue())])))) {
        deduplicatedChannelIds.push(Object.values(newChannelRow)[i]);
      }
      else {
        //Reset YT Data timestamp for this channel already in output table so that we'll fetch YT Data for this reappearing channel again
        //J is position within CHANNEL_IDS named range, need to add number of rows above it to get cell location of YT Data timestamp to be cleared
        var exclusionStatusColValues = wholeSpreadsheet.getRangeByName(currentSheetName + "!" + CONSTS.EXCLUSION_STATUS).getValues();
        var channelIdsFirstRow = wholeSpreadsheet.getRangeByName(currentSheetName + "!" + CONSTS.CHANNEL_IDS_COL).getRow();
        for (var j = 0; j < channelsAlreadyInTheTrix.length; j++) {
          if ((channelsAlreadyInTheTrix[j][0] === (Object.entries(newChannelRow)[i][1][headers.indexOf(channelIdsHeader.getValue())])) &&
            ((exclusionStatusColValues[0] != EXCLUSION_STATUS_VALUES.EXCLUDED) ||
              (exclusionStatusColValues[j][0] != EXCLUSION_STATUS_VALUES.EXCLUDED))) {
            currentSheet.getRange(j + channelIdsFirstRow, wholeSpreadsheet.getRangeByName(currentSheetName + "!" + CONSTS.YOUTUBE_TIMESTAMP_COL).getColumn(), 1, 1).clear();
          }
        }
        //There were no new channels added but there were reappearing channels that new YT metadata should be added to && this is the last page of results for this query
        var gadsTotalOrs = (wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_TOTAL_OR).getValue());
        if (!(nextPageToken.length > 0) && gadsTotalOrs == 0) {
          adsDataStatusRange.setValue(SCRIPT_STATUS_VALUES.DONE);
        }
      }
    }



    //If there were new channels added, append to the end of the output results table in spreadsheet
    if (deduplicatedChannelIds.length > 0) {
      verifyEnoughRows(wholeSpreadsheet.getActiveSheet(), deduplicatedChannelIds.length);
      range = currentSheet.getRange(newStartingRow, headersRange.getColumn(), deduplicatedChannelIds.length, Object.values(newChannelRow)[0].length);
      range.setValues(deduplicatedChannelIds);
      //If this is the last page of results for this query
      if (!(nextPageToken.length > 0) && gadsTotalOrs == 0) {
        adsDataStatusRange.setValue(SCRIPT_STATUS_VALUES.DONE);
      }
    }
  }
}

function verifyEnoughRows(currentSheet, rowsToAdd) {
  var lastRow = currentSheet.getLastRow();
  var maxRow = currentSheet.getMaxRows();
  if ((maxRow - lastRow) < rowsToAdd) {
    currentSheet.insertRows(lastRow, 1000);
  }
}

function runGAdsReport(query, currentSheetName) {
  var metricsArray = [];
  var customerId = currentSheetName.substring(0, currentSheetName.indexOf('_'));
  const SEARCH_URL = `https://googleads.googleapis.com/${API_VERSION}/customers/${customerId}/googleAds:search`;
  var payload = {
    "pageSize": MAX_GADS_IDS,
    "query": query
  };

  //If retrieving next page of results, get page token
  var nextPageToken = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_NEXT_PAGE_TOKEN).getValue().toString().trim();
  if (nextPageToken.length != 0 && nextPageToken > 0) {
    payload['pageToken'] = nextPageToken;
  }

  var request = {
    method: 'post',
    headers: {
      "Authorization": 'Bearer ' + OAUTH_TOKEN,
      "developer-token": DEVELOPER_TOKEN,
    },
    'contentType': 'application/json',
    'payload': JSON.stringify(payload),
    muteHttpExceptions: true // Set to true for full exceptions in logs
  };
  if ((wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.MCC_ID).getValue()).toString().trim().length != 0) {
    request.headers["login-customer-id"] = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.MCC_ID).getValue().toString();
  }

  var response = UrlFetchApp.fetch(SEARCH_URL, request);
  var reportResult = JSON.parse(response.getContentText());
  var responseCode = response.getResponseCode();
  if (responseCode != 200) {
    SpreadsheetApp.getActiveSpreadsheet().toast('💡 Warning! responseCode != 200');
    Logger.log("payload = " + JSON.stringify(payload));
    Logger.log("responseCode = " + JSON.stringify(responseCode));
    Logger.log("reportResult = " + JSON.stringify(reportResult));
  }
  if (reportResult.results == null) {
    return metricsArray;
  }

  const columns = reportResult.fieldMask.split(",");
  var data = generateTrixTable(reportResult.results, reportResult.fieldMask);

  //If there's another page of results after this one, store it in spreadsheet, call the method to add Google Ads data again with this page token to get next page of results
  var nextPageTokenCell = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_NEXT_PAGE_TOKEN);
  if (reportResult.nextPageToken != null) {
    nextPageToken = reportResult.nextPageToken;
    Logger.log("Setting next page token " + nextPageToken);
    nextPageTokenCell.setValue(nextPageToken);
  }
  //If there is no next page of results, reset page token and set query to next one
  else {
    nextPageTokenCell.setValue("");

    //Check if there are more queries to run after current one
    var gadsCurrentOrRange = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_CURRENT_OR);
    var gadsCurrentOr = gadsCurrentOrRange.getValue();
    var gadsTotalOrs = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_CURRENT_OR).getValue();

    //If this is the only/last query to run, reset gads query number
    if (gadsTotalOrs == 0 || gadsCurrentOr == (gadsTotalOrs - 1)) {
      Logger.log("No more queries, resetting 'gAds current OR' line to 0");
      gadsCurrentOrRange.setValue(0);
      wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.DONE);
    }
    //If there are more queries to run after this one, increase GAds query number 
    else {
      Logger.log("Incrememnting gads current 'OR' to " + (gadsCurrentOr + 1))
      gadsCurrentOrRange.setValue(gadsCurrentOr + 1);
    }
  }


  for (let i = 0; i < data.length; i++) {
    var dataRowDict = {};
    for (let j = 0; j < data[i].length; j++) {
      dataRowDict[columns[j]] = data[i][j];
    }
    metricsArray.push(dataRowDict);
  }
  return metricsArray;
}

/*
 Extracts report data as a data frame.
 results: Ads API report result
 fieldMask: Ads API field mask
**/
function generateTrixTable(results, fieldMask) {
  const keyset = fieldMask.split(",").map(e => e.split("."));
  var frame = [];
  results.forEach((result) => {
    var row = [];
    frame.push(row);
    keyset.forEach((keys) => {
      var val = result;
      keys.forEach((key) => val = val[key]);
      row.push(val);
    })

  });
  return frame;
}