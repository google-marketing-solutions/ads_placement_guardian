/*
Copyright 2022 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Copyright 2022 Google LLC. This solution, including any related sample code or data, is made available on an ‚Äúas is,‚Äù ‚Äúas available,‚Äù and ‚Äúwith all faults‚Äù basis, solely for illustrative purposes, and without warranty or representation of any kind. This solution is experimental, unsupported and provided solely for your convenience. Your use of it is subject to your agreements with Google, as applicable, and may constitute a beta feature as defined under those agreements.  To the extent that you make any data available to Google in connection with your use of the solution, you represent and warrant that you have all necessary and appropriate rights, consents and permissions to permit Google to use and process that data.  By using any portion of this solution, you acknowledge, assume and accept all risks, known and unknown, associated with its usage, including with respect to your deployment of any portion of this solution in your systems, or usage in connection with your business, if at all.*

 * Spamming channels
 * Author: eladb@, xingj@
 * 2022/07/12
 */
//For calling Google Ads API for placement exclusions
const API_VERSION = "v10";
// Do not change the values below
// -----
const OAUTH_TOKEN = ScriptApp.getOAuthToken();
const DEVELOPER_TOKEN = PropertiesService.getScriptProperties().getProperty("dev_token");
// ---

var wholeSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();

var operators = {
  '===': function (a, b) { return a === b; },
  '==': function (a, b) { return a == b; },
  '<=': function (a, b) { return a <= b; },
  '>=': function (a, b) { return a >= b; },
  '<': function (a, b) { return a < b; },
  '>': function (a, b) { return a > b; },
  '!=': function (a, b) { return a != b; }
};

var row;
var runtimeDuration;
var pagesOfFifty;
var allSheets = wholeSpreadsheet.getSheets();
var scriptProperties = PropertiesService.getScriptProperties();
const MAX_RUNNING_TIME = 4.5 * 60 * 1000;
const WAIT_BETWEEN_NEW_LOOP = 1 * 60 * 1000;
const TOAST_DISPALY_TIME = 30; //15 seconds
const MAX_TRIGGERS = 30;
const CHUNK_SIZE = 50; //Do not change to above 50, YouTube.Videos.List allows max of 50 ids
const SCRIPT_STATUS_VALUES = {
  DONE: 'DONE',
  RUNNING: 'CURRENTLY_RUNNING',
  WAITING: 'WAITING',
  IDLE: 'IDLE',
}

const EXCLUSION_STATUS_VALUES = {
  EXCLUDED: 'EXCLUDED'
}

var CONSTS = {
  CHANNEL_IDS: 'CHANNEL_IDS',
  SUB_COUNT: 'SUB_COUNT',
  SUB_COUNT_FILTER: 'SUB_COUNT_FILTER',
  SUB_COUNT_OPERATOR: 'SUB_COUNT_OPERATOR',
  VIEW_COUNT: 'VIEW_COUNT',
  VIEW_COUNT_FILTER: 'VIEW_COUNT_FILTER',
  VIEW_COUNT_OPERATOR: 'VIEW_COUNT_OPERATOR',
  LANG: 'LANGUAGE',
  LANGUAGE_FILTER: 'LANGUAGE_FILTER',
  LANGUAGE_OPERATOR: 'LANGUAGE_OPERATOR',
  LANGUAGE_EN_TITLE: 'LANGUAGE_EN_TITLE',
  LANGUAGE_EN_FILTER: 'LANGUAGE_EN_FILTER',
  VIDEO_COUNT: 'VIDEO_COUNT',
  VIDEO_COUNT_FILTER: 'VIDEO_COUNT_FILTER',
  VIDEO_COUNT_OPERATOR: 'VIDEO_COUNT_OPERATOR',
  PUBLISHED_DATE: 'PUBLISHED_DATE',
  PUBLISHED_DATE_FILTER: 'PUBLISHED_DATE_FILTER',
  PUBLISHED_DATE_OPERATOR: 'PUBLISHED_DATE_OPERATOR',
  COUNTRY: 'COUNTRY',
  COUNTRY_FILTER: 'COUNTRY_FILTER',
  COUNTRY_OPERATOR: 'COUNTRY_OPERATOR',


  YT_PAGE_INDEX: 'YT_PAGE_INDEX',

  GADS_SCRIPT_STATUS: 'GADS_SCRIPT_STATUS',
  GADS_EXCLUSION_SCRIPT_STATUS: 'GADS_EXCLUSION_SCRIPT_STATUS',
  YT_SCRIPT_STATUS: 'METADATA_EXCLUSIONS_STATUS',

  YT_ID_DEBUG: 'YT_ID_DEBUG',
  MCC_ID: 'MCC_ID',


  USER_EXCLUSION_CHECKBOX: 'USER_EXCLUSION_CHECKBOX',
  YOUTUBE_TIMESTAMP: 'YOUTUBE_TIMESTAMP',
  FILTERED_CHANNEL_IDS: 'FILTERED_CHANNEL_IDS',
  EXCLUSION_STATUS: 'EXCLUSION_STATUS',

  IS_GADS_ENABLED: 'IS_GADS_ENABLED',
  IS_YT_ENABLED: 'IS_YT_ENABLED',
  IS_USER_EXCLUSION_ENABLED: 'IS_USER_EXCLUSION_ENABLED',

  CACHED_SHEET_NAME: 'CACHED_SHEET_NAME',
}

//Creates menu item that client clicks once to authorize and then 5 min trigger is set 
function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('Channel Excluder')
    .addItem("Scan all sheets", 'scanAllSheets')
    .addItem("Stop", 'clearAll')
    .addItem("Restart", 'restart')
    .addToUi();
}

function restart() {
  clearAll();
  scanAllSheets();
}

function scanAllSheets() {
  //Checking if Google Ads data is already running in a sheet, if so: exit to allow run to finish. If not: call startE2eFlow 
  for (var i = 0; i < allSheets.length; i++) {
    var currentSheetName = allSheets[i].getSheetName();
    if (isCidAutomaticTab(currentSheetName)) {
      wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).setValue(allSheets[i].getSheetName());
      scanSheet();
    }
  }
}

function isCidAutomaticTab(currentSheetName) {
  return currentSheetName.includes("_automatic") && !currentSheetName.includes("[acctid]");
}

function scanSheet() {
  var currentSheetName = wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).getValue();

  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.RUNNING);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.IDLE);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_EXCLUSION_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.IDLE);

  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS_GAds.GADS_NEXT_PAGE_TOKEN).setValue(0);

  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS_GAds.GADS_CURRENT_OR).setValue(0);
  var gadsTotalOrs = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS_GAds.METRICS_FILTERS).getValues().filter(String).length;
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS_GAds.GADS_TOTAL_OR).setValue(gadsTotalOrs);

  //Next
  runGAdsPart();
}


/**
 *  (1) Fetching G-Ads historic data
 */
function runGAdsPart() {
  var currentSheetName = wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).getValue();
  removeAllTriggers();

  var currentOrIndex = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS_GAds.GADS_CURRENT_OR).getValue();
  var totalOrs = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS_GAds.GADS_TOTAL_OR).getValue();

if (currentOrIndex >  totalOrs){
moveToYtAction();
}

  wholeSpreadsheet.toast('', '‚è∞ Gads data', TOAST_DISPALY_TIME);
  getGAdsData(currentSheetName);

  //After
  if (isGadsWorkSplitNeeded(currentSheetName)) {
    createTrigger("runGAdsPart", "üí° Gads fetch runs on the next chuck.", 0);
  }
  else {
    moveToYtAction();
  }
}

function moveToYtAction(){
      //A is done
    wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS_GAds.GADS_NEXT_PAGE_TOKEN).setValue(0);
    wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.DONE);
    //remove triggers
    removeAllTriggers();

    //Next
    runYtPart();
}

/**
 *  (2) Fetching YT historic data
 */
function runYtPart() {
  var currentSheetName = wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).getValue();
  removeAllTriggers();

  wholeSpreadsheet.toast('', '‚è∞ YT data', TOAST_DISPALY_TIME);
  var currentSheetName = wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).getValue();

  refreshYtDataToRelevantChannels(currentSheetName);

  //If more channels than MAX_CHANNEL_IDS, create trigger to continue later and stop going through sheets
  if (isYtWorkSplitNeeded(currentSheetName)) {
    createTrigger("runYtPart", "üí° YT data API runs on the next chuck.", 0);
  }
  else {

    //B is done
    wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.DONE);
    wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_PAGE_INDEX).setValue(0);
    //remove triggers
    removeAllTriggers();

    //Next
    runExclusionPart();
  }
}

function createTrigger(functionName, toastMessage, delay) {
  var currTime = (new Date()).getTime();
  SpreadsheetApp.getActiveSpreadsheet().toast('', toastMessage, TOAST_DISPALY_TIME);
  Logger.log(toastMessage);
  ScriptApp.newTrigger(functionName)
    .timeBased()
    .at(new Date(currTime + delay))
    .create();
}

/**
 *  (3) G-Ads exclude API
 */
function runExclusionPart() {
  var currentSheetName = wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).getValue();

  //pre C
  var isGAdsExclusionEnabled = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.USER_EXCLUSION_CHECKBOX);
  removeAllTriggers();
  if (!isGAdsExclusionEnabled) {
    if (isCidAutomaticTab(currentSheetName)) {
      //Call A with delay
      createTrigger("runGAdsPart", "üí° Finished a whole cycle", WAIT_BETWEEN_NEW_LOOP);
    }
    //finish
    return;
  }

  wholeSpreadsheet.toast('', '‚è∞ GAds exclusion', TOAST_DISPALY_TIME);
  //Do C
  var idsToRowIdToBeExcluded = getUserSelectedChannels();
  if (Object.keys(idsToRowIdToBeExcluded).length != 0) {
    callExcludeApi(createPayload(Object.keys(idsToRowIdToBeExcluded)), currentSheetName, idsToRowIdToBeExcluded);
  }

  //If more channels than MAX_CHANNEL_IDS, create trigger to continue later and stop going through sheets
  if (isExcludingWorkSplitNeeded(currentSheetName)) {
    createTrigger("runExclusionPart", "üí° Gads exclude API runs on the next chuck.", 0);

  }
  else {
    wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS_GAds.GADS_EXCLUSION_PAGE_INDEX).setValue(0);
    wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_EXCLUSION_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.DONE);

    removeAllTriggers();
    createTrigger("runGAdsPart", "üí° Finished a whole cycle", WAIT_BETWEEN_NEW_LOOP);
  }
}


function getUserSelectedChannels() {
  var currentSheetName = wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).getValue();
  var channelIdToRowId = {};
  var idsRange = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.CHANNEL_IDS);
  var idsFirstRow = idsRange.getRow();
  var idsColumnIndex = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.CHANNEL_IDS).getColumn();

  var userExclusionCheckboxCol = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.USER_EXCLUSION_CHECKBOX).getColumn();
  var lastRow = wholeSpreadsheet.getSheetByName(currentSheetName).getLastRow();

  var i = idsFirstRow;
  wholeSpreadsheet.getSheetByName(currentSheetName).getRange(idsFirstRow, 1, lastRow, idsColumnIndex).getValues().forEach(function (row) {
    if (row[userExclusionCheckboxCol - 1]) {
      var currentChannelId = row[idsColumnIndex - 1];
      channelIdToRowId[currentChannelId] = i;
    };
    i++;
  });
  return channelIdToRowId;
}


function isYtWorkSplitNeeded(currentSheetName) {
  //If there are more channels to exclude than CHUNK_SIZE, create trigger to continue 
  var totalChannelsInTrix = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.CHANNEL_IDS).getValues().filter(String).length;
  var ytPageIndexRange = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS_GAds.GADS_EXCLUSION_PAGE_INDEX);

  var currentYtPage = ytPageIndexRange.getValue();
  ytPageIndexRange.setValue(currentYtPage + 1);
  if (((currentYtPage + 1) * CHUNK_SIZE) < totalChannelsInTrix) {    
    return true;
  }
  else {
    return false;
  }
}


function isExcludingWorkSplitNeeded(currentSheetName) {
  //If there are more channels to exclude than CHUNK_SIZE, create trigger to continue 
  var totalChannelsInTrix = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.CHANNEL_IDS).getValues().filter(String).length;

  var exclusionIndex = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS_GAds.GADS_EXCLUSION_PAGE_INDEX);

  var currentYtPage = exclusionIndex.getValue();
  if (((currentYtPage + 1) * CHUNK_SIZE) < totalChannelsInTrix) {
    exclusionIndex.setValue(currentYtPage + 1);
    return true;
  }
  else {
    return false;
  }
}

function isOnlyNumber(str) {
  return /^[0-9]+$/.test(str);
}

function isNotEnglishCharacters(str) {
  const regex = /^[~`!@#$%^&*()_+=[\]\{}|;':",.\/<>?a-zA-Z0-9- ]+$/;
  return !(regex.test(str));
};

function filterYtMetadata(actualValue, expectedValue, operator) {
  if (typeof (expectedValue) == "string" && typeof (actualValue) == "string") {
    return (actualValue == null || operators[operator](actualValue.toLowerCase(), expectedValue.toLowerCase()) || expectedValue == "");
  }
  return (actualValue == null || operators[operator](actualValue, expectedValue) || expectedValue == "");
}

//Once all pages are done, reset Ads Data Status and Current Page Index 
function clearAll() {
  var currentSheetName = wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).getValue();
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS_GAds.GADS_NEXT_PAGE_TOKEN).setValue(0);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_PAGE_INDEX).setValue(0);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.IDLE);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.IDLE);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_EXCLUSION_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.IDLE);
  removeAllTriggers();
  SpreadsheetApp.getActiveSpreadsheet().toast("Finished adding YT Metadata & Acct Exclusions", "üí° " + currentSheetName + " Notice ", TOAST_DISPALY_TIME);
};

function refreshYtDataToRelevantChannels(currentSheetName) {
  var channelIdToRowId = {};
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.RUNNING);

  var currentYtPage = parseInt(wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_PAGE_INDEX).getValue());
  var channelIdsFirstRow = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.CHANNEL_IDS).getRow();
  var channelIdsColumn = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.CHANNEL_IDS).getColumn();
  var exclusionStatusRange = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.EXCLUSION_STATUS);

  //add data only to channels which are not excluded already
  for (let i = (channelIdsFirstRow + (currentYtPage * CHUNK_SIZE)); i < (channelIdsFirstRow + ((currentYtPage + 1) * CHUNK_SIZE)); i++) {
    var isExcludedAlready = wholeSpreadsheet.getSheetByName(currentSheetName).getRange(i, exclusionStatusRange.getColumn()) == EXCLUSION_STATUS_VALUES.EXCLUDED;
    var hasChannelId = !wholeSpreadsheet.getSheetByName(currentSheetName).getRange(i, channelIdsColumn).isBlank();
    if (!isExcludedAlready && hasChannelId) {
      var currentChannelId = ((wholeSpreadsheet.getSheetByName(currentSheetName).getRange(i, channelIdsColumn)).getValue());
      channelIdToRowId[currentChannelId] = (i - channelIdsFirstRow);
    }
  }
  Logger.log("Adding YT data");
  return callYtChannelAPI(channelIdToRowId, currentSheetName);
}

/**
 *  https://developers.google.com/youtube/v3/docs/channels
 */
function callYtChannelAPI(channelIdToRowId, currentSheetName) {
  var channelIds = Object.keys(channelIdToRowId);

  if (channelIds.length == 0) {
    Logger.log("There are no channels waiting for metadata");
    return channelIdToRowId;
  }

  var subCountFilter = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.SUB_COUNT_FILTER).getValue();
  var subCountOperator = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.SUB_COUNT_OPERATOR).getValue();
  var viewCountFilter = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIEW_COUNT_FILTER).getValue();
  var viewCountOperator = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIEW_COUNT_OPERATOR).getValue();
  var languageFilter = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.LANGUAGE_FILTER).getValue();
  var languageOperator = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.LANGUAGE_OPERATOR).getValue();
  var videoCountFilter = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIDEO_COUNT_FILTER).getValue();
  var videoCountOperator = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIDEO_COUNT_OPERATOR).getValue();
  var publishedDateFilter = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.PUBLISHED_DATE_FILTER).getValue();
  var publishedDateOperator = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.PUBLISHED_DATE_OPERATOR).getValue();
  var countryFilter = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.COUNTRY_FILTER).getValue();
  var countryOperator = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.COUNTRY_OPERATOR).getValue();
  var languageEnFilter = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.LANGUAGE_EN_FILTER).getValue();

  if (!(subCountFilter | viewCountFilter | languageFilter | videoCountFilter | publishedDateFilter | countryFilter | !languageEnFilter)) {
    SpreadsheetApp.getActiveSpreadsheet().toast('no YT filters', "üí° Warning!", TOAST_DISPALY_TIME);
  }

  var currentPageMetadata = YouTube.Channels.list('id, snippet, statistics, brandingSettings', {
    id: channelIds.join()
  }).getItems();

  currentPageMetadata = currentPageMetadata.filter(item =>
    ((filterYtMetadata(item.statistics.viewCount, viewCountFilter, viewCountOperator)) &&
      (filterYtMetadata(item.statistics.subscriberCount, subCountFilter, subCountOperator)) &&
      (filterYtMetadata(item.brandingSettings.channel.defaultLanguage, languageFilter, languageOperator)) &&
      (filterYtMetadata(item.statistics.videoCount, videoCountFilter, videoCountOperator)) &&
      (filterYtMetadata(item.snippet.publishedAt, publishedDateFilter, publishedDateOperator)) &&
      (filterYtMetadata(item.snippet.country, countryFilter, countryOperator))) &&
    (languageEnFilter != false || item.snippet.title == null || item.snippet.title == "" || isNotEnglishCharacters(item.snippet.title)));

  setYtMetadataHeaders(currentSheetName);
  var checkboxRange = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.USER_EXCLUSION_CHECKBOX);

  for (var j in currentPageMetadata) {
    var channel = currentPageMetadata[j];
    var position = channelIdToRowId[channel.id];
    fillTableWithYyData(currentSheetName, checkboxRange, position, channel);
  }
}

function setYtMetadataHeaders(currentSheetName) {
  // Set YT Metadata headers
  var headersRange = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.SUB_COUNT).offset(-1, 0);
  if (!headersRange.isBlank()) {
    return
  }
  headersRange.setValue(CONSTS.SUB_COUNT);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIEW_COUNT).offset(-1, 0).setValue(CONSTS.VIEW_COUNT);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.LANG).offset(-1, 0).setValue(CONSTS.LANG);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIDEO_COUNT).offset(-1, 0).setValue(CONSTS.VIDEO_COUNT);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.PUBLISHED_DATE).offset(-1, 0).setValue(CONSTS.PUBLISHED_DATE);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_ID_DEBUG).offset(-1, 0).setValue(CONSTS.YT_ID_DEBUG);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.COUNTRY).offset(-1, 0).setValue(CONSTS.COUNTRY);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.LANGUAGE_EN_TITLE).offset(-1, 0).setValue(CONSTS.LANGUAGE_EN_TITLE);
}

function fillTableWithYyData(currentSheetName, checkboxRange, position, channel) {

  checkboxRange.offset(position, 0).insertCheckboxes();
  checkboxRange.offset(position, 0).setValue(isCidAutomaticTab(currentSheetName) ? true : false);

  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YOUTUBE_TIMESTAMP).offset(position, 0).setValue(Utilities.formatDate(new Date(), "GMT+2", "yyyy-MM-dd'T'HH:mm:ss'Z'"));
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_ID_DEBUG).offset(position, 0).setValue(channel.id);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.SUB_COUNT).offset(position, 0).setValue(channel.statistics.subscriberCount);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIEW_COUNT).offset(position, 0).setValue(channel.statistics.viewCount);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.LANG).offset(position, 0).setValue(channel.brandingSettings.channel.defaultLanguage);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIDEO_COUNT).offset(position, 0).setValue(channel.statistics.videoCount);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.PUBLISHED_DATE).offset(position, 0).setValue(channel.snippet.publishedAt);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.COUNTRY).offset(position, 0).setValue(channel.snippet.country);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.LANGUAGE_EN_TITLE).offset(position, 0).setValue(isNotEnglishCharacters(channel.snippet.title) + ": " + channel.snippet.title);
}

function removeTriggersByName(functionName) {
  try {
    var triggers = ScriptApp.getProjectTriggers();
    for (var i = 0; i < triggers.length; i++) {
      // delete all triggers
      if (triggers[i].getHandlerFunction().toString() == functionName) {
        ScriptApp.deleteTrigger(triggers[i]);
      }
    }
  }
  catch (e) {
    SpreadsheetApp.getActiveSpreadsheet().toast('Failed to cleanup triggers', 'üí° Error!', TOAST_DISPALY_TIME);
  };
}

function removeAllTriggers() {
  try {
    var triggers = ScriptApp.getProjectTriggers();
    for (var i = 0; i < triggers.length; i++) {
      // delete all triggers
      ScriptApp.deleteTrigger(triggers[i]);
    }
  }
  catch (e) {
    SpreadsheetApp.getActiveSpreadsheet().toast('Failed to cleanup triggers', 'üí° Error!', TOAST_DISPALY_TIME);
  };
}


//Generating all the create exclusion statements for each channel ID
function createPayload(idsToExclude) {
  var payload = {
    "operations": [
    ]
  };
  //For each channel ID need to create a new "create" object
  for (let i = 0; i < idsToExclude.length; i++) {
    payload.operations[i] = {
      create: {
        youtubeChannel: {
          channelId: String(idsToExclude[i])
        }
      }
    }
  }
  return payload
}

//Excludes channels at the Account level for channel IDs that have been selected 
function callExcludeApi(createdPayload, currentSheetName, channelIdToRowId) {
  Logger.log("Calling Exclude API");

  var nextPageToken = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS_GAds.GADS_NEXT_PAGE_TOKEN).getValue().toString().trim();
  if (nextPageToken.length != 0 && nextPageToken > 0) {
    payload['pageToken'] = nextPageToken;
  }

  var customerId = currentSheetName.substring(0, currentSheetName.indexOf('_'));
  var channelIdToRowId = channelIdToRowId;
  const SEARCH_URL = `https://googleads.googleapis.com/${API_VERSION}/customers/${customerId}/customerNegativeCriteria:mutate`;
  var payload = createdPayload;
  var request = {
    method: 'post',
    headers: {
      "Authorization": 'Bearer ' + OAUTH_TOKEN,
      "developer-token": DEVELOPER_TOKEN,
    },
    'contentType': 'application/json',
    'payload': JSON.stringify(payload),
    muteHttpExceptions: true // Set to true for full exceptions in logs
  };
  if ((wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.MCC_ID).getValue()).toString().trim().length != 0) {
    request.headers["login-customer-id"] = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.MCC_ID).getValue().toString();
  }

  var response = UrlFetchApp.fetch(SEARCH_URL, request);
  var responseCode = response.getResponseCode();

  if (responseCode != 200) {
    SpreadsheetApp.getActiveSpreadsheet().toast('responseCode != 200', 'üí° Warning!', TOAST_DISPALY_TIME);
  }
  var reportResult = JSON.parse(response.getContentText());
  if (reportResult.hasOwnProperty('error')) {
    Logger.log("Error: ")
    Logger.log(JSON.stringify(reportResult['error']));
    SpreadsheetApp.getActiveSpreadsheet().toast(JSON.stringify(reportResult['error']['message']), 'Exclusion Error', -1);
    for (var channelId in channelIdToRowId) {
      var position = channelIdToRowId[channelId];
      wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.EXCLUSION_STATUS).offset(position, 0, 1, 1).setValue("Exclusion Error " + JSON.stringify(reportResult['error']['details'][0]['reason']));
    };
  }
  else {
    Logger.log("Successfully excluded channels.");
    //Excluded successfully. Look up channel ID in sheet, set value "Excluded" in status column

    Object.entries(channelIdToRowId).forEach(function (key, value) {
      wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.EXCLUSION_STATUS).offset(value, 0, 1, 1).setValue(EXCLUSION_STATUS_VALUES.EXCLUDED);
    });
  };
}