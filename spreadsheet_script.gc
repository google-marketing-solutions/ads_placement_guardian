/*
Copyright 2022 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Copyright 2022 Google LLC. This solution, including any related sample code or data, is made available on an ‚Äúas is,‚Äù ‚Äúas available,‚Äù and ‚Äúwith all faults‚Äù basis, solely for illustrative purposes, and without warranty or representation of any kind. This solution is experimental, unsupported and provided solely for your convenience. Your use of it is subject to your agreements with Google, as applicable, and may constitute a beta feature as defined under those agreements.  To the extent that you make any data available to Google in connection with your use of the solution, you represent and warrant that you have all necessary and appropriate rights, consents and permissions to permit Google to use and process that data.  By using any portion of this solution, you acknowledge, assume and accept all risks, known and unknown, associated with its usage, including with respect to your deployment of any portion of this solution in your systems, or usage in connection with your business, if at all.*

 * Spamming channels
 * Author: eladb@, xingj@
 * 2022/07/13
 */
//For calling Google Ads API for placement exclusions
const API_VERSION = "v10";
// Do not change the values below
// -----
const OAUTH_TOKEN = ScriptApp.getOAuthToken();
const DEVELOPER_TOKEN = PropertiesService.getScriptProperties().getProperty("dev_token");
// ---

var wholeSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();

var operators = {
  '===': function (a, b) { return a === b; },
  '==': function (a, b) { return a == b; },
  '<=': function (a, b) { return a <= b; },
  '>=': function (a, b) { return a >= b; },
  '<': function (a, b) { return a < b; },
  '>': function (a, b) { return a > b; },
  '!=': function (a, b) { return a != b; }
};

var scriptProperties = PropertiesService.getScriptProperties();
const MAX_RUNNING_TIME = 4.5 * 60 * 1000;
var WAIT_BETWEEN_LOOPS = 1 * 60 * 1000;
const TOAST_DISPALY_TIME = 30; //15 seconds
const MAX_TRIGGERS = 30;
const CHUNK_SIZE = 50; //Do not change to above 50, YouTube.Videos.List allows max of 50 ids
const SCRIPT_STATUS_VALUES = {
  DONE: 'Done.',
  RUNNING: 'Running. It might take time.',
  WAITING: 'WAITING',
  IDLE: 'Idle.',
}

const EXCLUSION_STATUS_VALUES = {
  EXCLUDED: 'EXCLUDED'
}

var CONSTS = {
  CHANNEL_IDS: 'CHANNEL_IDS',
  SUB_COUNT: 'SUB_COUNT',
  SUB_COUNT_FILTER: 'SUB_COUNT_FILTER',
  SUB_COUNT_OPERATOR: 'SUB_COUNT_OPERATOR',
  VIEW_COUNT: 'VIEW_COUNT',
  VIEW_COUNT_FILTER: 'VIEW_COUNT_FILTER',
  VIEW_COUNT_OPERATOR: 'VIEW_COUNT_OPERATOR',
  LANG: 'LANGUAGE',
  LANGUAGE_FILTER: 'LANGUAGE_FILTER',
  LANGUAGE_OPERATOR: 'LANGUAGE_OPERATOR',
  LANGUAGE_EN_TITLE: 'LANGUAGE_EN_TITLE',
  LANGUAGE_EN_FILTER: 'LANGUAGE_EN_FILTER',
  VIDEO_COUNT: 'VIDEO_COUNT',
  VIDEO_COUNT_FILTER: 'VIDEO_COUNT_FILTER',
  VIDEO_COUNT_OPERATOR: 'VIDEO_COUNT_OPERATOR',
  PUBLISHED_DATE: 'PUBLISHED_DATE',
  PUBLISHED_DATE_FILTER: 'PUBLISHED_DATE_FILTER',
  PUBLISHED_DATE_OPERATOR: 'PUBLISHED_DATE_OPERATOR',
  COUNTRY: 'COUNTRY',
  COUNTRY_FILTER: 'COUNTRY_FILTER',
  COUNTRY_OPERATOR: 'COUNTRY_OPERATOR',

  YT_PAGE_INDEX: 'YT_PAGE_INDEX',

  GADS_SCRIPT_STATUS: 'GADS_SCRIPT_STATUS',
  GADS_EXCLUSION_SCRIPT_STATUS: 'GADS_EXCLUSION_SCRIPT_STATUS',
  YT_SCRIPT_STATUS: 'METADATA_EXCLUSIONS_STATUS',

  YT_ID_DEBUG: 'YT_ID_DEBUG',
  MCC_ID: 'MCC_ID',

  USER_EXCLUSION_CHECKBOX: 'USER_EXCLUSION_CHECKBOX',
  YOUTUBE_TIMESTAMP: 'YOUTUBE_TIMESTAMP',
  FILTERED_CHANNEL_IDS: 'FILTERED_CHANNEL_IDS',
  EXCLUSION_STATUS: 'EXCLUSION_STATUS',

  IS_GADS_ENABLED: 'IS_GADS_ENABLED',
  IS_YT_ENABLED: 'IS_YT_ENABLED',
  IS_USER_EXCLUSION_ENABLED: 'IS_USER_EXCLUSION_ENABLED',

  CACHED_SHEET_NAME: 'CACHED_SHEET_NAME',
  CACHED_SHEET_INDEX: 'CACHED_SHEET_INDEX',

  IS_YT_NEW: 'IS_YT_NEW',
  IS_EXCLUSION_NEW: 'IS_EXCLUSION_NEW',

  NEW: 'NEW',
  OUTPUT: 'Output',
  METRICS_FILTERS: 'METRICS_FILTERS',
  CHANNEL_IDS_COL: 'CHANNEL_IDS',
  HEADERS: 'HEADERS',
  YOUTUBE_TIMESTAMP_COL: 'YOUTUBE_TIMESTAMP',
  GO_BACK_DAYS_EARLY: 'GO_BACK_DAYS_EARLY',
  GO_BACK_DAYS_LATE: 'GO_BACK_DAYS_LATE',
  EMAIL_SUBJECT: 'EMAIL_SUBJECT',
  EMAILS: 'EMAILS',
  CHANNEL_IDS_HEADER: 'CHANNEL_IDS_HEADER',
  CID: 'CID',

  GADS_NEXT_PAGE_TOKEN: 'GADS_NEXT_PAGE_TOKEN',
  GADS_EXCLUSION_PAGE_INDEX: 'GADS_EXCLUSION_PAGE_INDEX',

  YT_TARGET_URL_COL: 'YT_TARGET_URL_COL',
  DISPLAY_NAME_COL: 'DISPLAY_NAME_COL',
  GADS_TOTAL_OR: 'GADS_TOTAL_OR',
  GADS_CURRENT_OR: 'GADS_CURRENT_OR',
  GADS_ORS: 'GADS_ORS',

  ALLOW_CLEAR_TABLE: 'ALLOW_CLEAR_TABLE',
  WAIT_BETWEEN_LOOPS: 'WAIT_BETWEEN_LOOPS'
}

//Creates menu item that client clicks once to authorize and then 5 min trigger is set 
function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('Channel Excluder')
    .addItem("Scan all automatic sheets", 'restart')
    .addItem("Stop", 'removeAllTriggers')
    .addToUi();
}

function restart() {
  clearAll();
  scanNextSheet();
}

function scanNextSheet() {
  var cachedSheetIndexCell = wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_INDEX);
  var cachedSheetIndex = cachedSheetIndexCell.getValue();

  var allSheets = wholeSpreadsheet.getSheets();
  var currentSheetIndex = (cachedSheetIndex == undefined || "") ? 0 : (cachedSheetIndex + 1) % allSheets.length;
  for (; currentSheetIndex < allSheets.length && !isAutomaticTab(allSheets[currentSheetIndex].getSheetName()); currentSheetIndex++) {
    //loop till the end of the list
  }

  if (currentSheetIndex < allSheets.length) { // finished because we've found the first automatic tab
    cachedSheetIndexCell.setValue(currentSheetIndex);
    var currentSheetName = allSheets[currentSheetIndex].getSheetName();
    wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).setValue(allSheets[currentSheetIndex].getSheetName());
    WAIT_BETWEEN_LOOPS = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.WAIT_BETWEEN_LOOPS).getValue() * 1000;
    scanSheet();
  }
  else { //reached the list's end
    cachedSheetIndexCell.setValue(undefined);
    wholeSpreadsheet.getRangeByName("");
    //Sleeps before re-starting the sheet loop
  createTrigger("scanNextSheet", "Moving to next tab in a few minutes", "Finished all tabsüèÅ", 0);
  }
}

function isAutomaticTab(currentSheetName) {
  return currentSheetName.includes("_automatic") && !currentSheetName.includes("[acctid]");
}

function scanSheet() {
  clearAll();
  //Next
  runGAdsPart();
}


function setUpForManual() {
  wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).setValue(wholeSpreadsheet.getActiveSheet().getSheetName());
}

/**
 *  (1) Fetching G-Ads historic data
 */
function runGAdsPart() {
  var currentSheetName = wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).getValue();
  removeAllTriggers();

  wholeSpreadsheet.toast('', 'üì£ Google-Ads', TOAST_DISPALY_TIME);
  getGAdsData(currentSheetName);
  if (isGadsWorkSplitNeeded(currentSheetName)) {
    createTrigger("runGAdsPart", "Re-work. Wait 0.5 min ‚ôªÔ∏è", "üì£ Google-Ads", 0);    
  } else {
    wholeSpreadsheet.toast('Please wait', 'üì£ Google-Ads', TOAST_DISPALY_TIME);

    //A is done
    wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_NEXT_PAGE_TOKEN).setValue(0);
    wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.DONE);
    //remove triggers
    removeAllTriggers();

    if (isAutomaticTab(currentSheetName)) {
      //Next
      runYtPart();
    }
  }
}

/**
 *  (2) Fetching YT historic data
 */
function runYtPart() {
  var currentSheetName = wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).getValue();
  removeAllTriggers();


  wholeSpreadsheet.toast('', 'üéû YouTube', TOAST_DISPALY_TIME);
  var currentSheetName = wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).getValue();
  refreshYtDataToRelevantChannels(currentSheetName);

  if (isYtWorkSplitNeeded(currentSheetName)) {
    createTrigger("runYtPart", "Re-work. Wait 0.5 min ‚ôªÔ∏è", "üéû YouTube", 0);
  } else {
    if (wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.IS_YT_NEW).getValue() != CONSTS.NEW) {
      sendEmail(currentSheetName);
    }

    wholeSpreadsheet.toast('Please wait', 'üéû YouTube', TOAST_DISPALY_TIME);

    //B is done
    wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.DONE);
    wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_PAGE_INDEX).setValue(0);
    wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.IS_YT_NEW).setValue("");
    //remove triggers    
    removeAllTriggers();

    if (isAutomaticTab(currentSheetName)) {
      //Next
      runExclusionPart();
    }
  }
}


function sendEmail(currentSheetName) {
  Logger.log('Sending Email with a link to spreadsheet');
  MailApp.sendEmail(
    {
      to: wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.EMAILS).getValue(),
      subject: wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.EMAIL_SUBJECT).getValue(),
      htmlBody:
        "<h3> New channels to excluded </h3><br>" +
        "<h1> Full spreadsheet: </h1><br>" +
        SPREADSHEET_URL +
        "<h3> Tab: </h3><br>" +
        currentSheetName
    });
}

function createTrigger(functionName, toastBody, toastHeader, delay) {
  if (delay < 0) return;
  var currTime = (new Date()).getTime();
  SpreadsheetApp.getActiveSpreadsheet().toast(toastBody, toastHeader, TOAST_DISPALY_TIME);
  Logger.log(toastHeader);
  ScriptApp.newTrigger(functionName)
    .timeBased()
    .at(new Date(currTime + delay))
    .create();
}

/**
 *  (3) G-Ads exclude API
 */
function runExclusionPart() {
  var currentSheetName = wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).getValue();
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_EXCLUSION_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.RUNNING);

  //pre C
  var isGAdsExclusionEnabled = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.USER_EXCLUSION_CHECKBOX);
  removeAllTriggers();
  if (!isGAdsExclusionEnabled) {
    if (isAutomaticTab(currentSheetName)) {
      finishedCurrentTab(currentSheetName);
    }
    //Manual - no triggers
    return;
  }

  wholeSpreadsheet.toast('', '‚õîÔ∏è Exclusion', TOAST_DISPALY_TIME);
  //Do C
  var idsToRowIdToBeExcluded = getUserSelectedChannels();
  if (Object.keys(idsToRowIdToBeExcluded).length != 0) {
    callExcludeApi(createPayload(Object.keys(idsToRowIdToBeExcluded)), currentSheetName, idsToRowIdToBeExcluded);
  }
  if (isExcludingWorkSplitNeeded(currentSheetName)) {
    createTrigger("runExclusionPart", "Re-work. Wait 0.5 min ‚ôªÔ∏è", "‚õîÔ∏è Exclusion", 0);
  }  else {
    if (isAutomaticTab(currentSheetName)) {
      finishedCurrentTab(currentSheetName);
    }
  }
}


function finishedCurrentTab(currentSheetName) {
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_EXCLUSION_PAGE_INDEX).setValue(0);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_EXCLUSION_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.DONE);

  removeAllTriggers();
  createTrigger("scanNextSheet", "Moving to next tab in a few minutes", "Finished üèÅ", WAIT_BETWEEN_LOOPS);
}

function getUserSelectedChannels() {
  var currentSheetName = wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).getValue();

  var channelIdToRowId = {};
  var idsRangeRow = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.CHANNEL_IDS).getRow();
  var idsFirstRow = idsRangeRow + CHUNK_SIZE * wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_EXCLUSION_PAGE_INDEX).getValue();
  var idsColumnIndex = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.CHANNEL_IDS).getColumn();

  var userExclusionCheckboxCol = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.USER_EXCLUSION_CHECKBOX).getColumn();
  var exclusionStatusCol = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.EXCLUSION_STATUS).getColumn();
  var lastRow = wholeSpreadsheet.getSheetByName(currentSheetName).getLastRow();

  var i = idsFirstRow;
  wholeSpreadsheet.getSheetByName(currentSheetName).getRange(idsFirstRow, 1, lastRow, idsColumnIndex).getValues().forEach(function (row) {
    if (row[userExclusionCheckboxCol - 1] && (row[exclusionStatusCol - 1] != EXCLUSION_STATUS_VALUES.EXCLUDED)) {
      var currentChannelId = row[idsColumnIndex - 1];
      channelIdToRowId[currentChannelId] = i;
    };
    i++;
  });
  return channelIdToRowId;
}


function isYtWorkSplitNeeded(currentSheetName) {
  //If there are more channels to exclude than CHUNK_SIZE, create trigger to continue 
  var totalChannelsInTrix = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.CHANNEL_IDS).getValues().filter(String).length;
  var ytPageIndexRange = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_PAGE_INDEX);

  var currentPage = ytPageIndexRange.getValue();
  ytPageIndexRange.setValue(currentPage + 1);

  var nextChunkFirstRow = (currentPage + 1) * CHUNK_SIZE;
  SpreadsheetApp.getActiveSpreadsheet().toast('scanning till row ' + nextChunkFirstRow + ' (total: ' + totalChannelsInTrix + ' rows)', "üí° YT data", TOAST_DISPALY_TIME);
  return nextChunkFirstRow < totalChannelsInTrix;

}


function isExcludingWorkSplitNeeded(currentSheetName) {
  //If there are more channels to exclude than CHUNK_SIZE, create trigger to continue 
  var totalChannelsInTrix = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.CHANNEL_IDS).getValues().filter(String).length;

  var exclusionIndex = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_EXCLUSION_PAGE_INDEX);

  var currentPage = exclusionIndex.getValue();
  exclusionIndex.setValue(currentPage + 1);
  var nextChunkFirstRow = (currentPage + 1) * CHUNK_SIZE;
  SpreadsheetApp.getActiveSpreadsheet().toast('scanning till row ' + nextChunkFirstRow + ' (total: ' + totalChannelsInTrix + ' rows)', "üí° GAds exclusion", TOAST_DISPALY_TIME);
  return nextChunkFirstRow < totalChannelsInTrix;
}

function isOnlyNumber(str) {
  return /^[0-9]+$/.test(str);
}

function isNotEnglishCharacters(str) {
  const regex = /^[~`!@#$%^&*()_+=[\]\{}|;':",.\/<>?a-zA-Z0-9- ]+$/;
  return !(regex.test(str));
};

function filterYtMetadata(actualValue, expectedValue, operator) {
  if (typeof (expectedValue) == "string" && typeof (actualValue) == "string") {
    return (actualValue == null || operators[operator](actualValue.toLowerCase(), expectedValue.toLowerCase()) || expectedValue == "");
  }
  return (actualValue == null || operators[operator](actualValue, expectedValue) || expectedValue == "");
}

function clearAll() {
  var currentSheetName = wholeSpreadsheet.getRangeByName(CONSTS.CACHED_SHEET_NAME).getValue();
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_NEXT_PAGE_TOKEN).setValue(0);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_PAGE_INDEX).setValue(0);

  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_CURRENT_OR).setValue(0);
  var gadsTotalOrs = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.METRICS_FILTERS).getValues().filter(String).length;
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_TOTAL_OR).setValue(gadsTotalOrs);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.IS_YT_NEW).setValue("");

  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_EXCLUSION_PAGE_INDEX).setValue(0);

  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.IDLE);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.IDLE);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_EXCLUSION_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.IDLE);
  removeAllTriggers();

  // if (wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.ALLOW_CLEAR_TABLE).getValue()) {
  //   var tableStartCell = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.USER_EXCLUSION_CHECKBOX);
  //   var outputStartRow = tableStartCell.getRowIndex();
  //   var lastRow = wholeSpreadsheet.getSheetByName(currentSheetName).getLastRow();
  //   var lastCol = wholeSpreadsheet.getSheetByName(currentSheetName).getLastColumn();
  //   if (lastRow > outputStartRow) {
  //     tableStartCell.offset(0, 0, lastRow - outputStartRow, lastCol).clearContent().removeCheckboxes();
  //   }
  // }
  SpreadsheetApp.getActiveSpreadsheet().toast("", "üí° Cleared.", TOAST_DISPALY_TIME);
}

function refreshYtDataToRelevantChannels(currentSheetName) {
  var channelIdToRowId = {};
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_SCRIPT_STATUS).setValue(SCRIPT_STATUS_VALUES.RUNNING);

  var currentYtPage = parseInt(wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_PAGE_INDEX).getValue());
  var channelIdsFirstRow = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.CHANNEL_IDS).getRow();
  var channelIdsColumn = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.CHANNEL_IDS).getColumn();
  var exclusionStatusRange = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.EXCLUSION_STATUS);

  //add data only to channels which are not excluded already
  for (let i = (channelIdsFirstRow + (currentYtPage * CHUNK_SIZE)); i < (channelIdsFirstRow + ((currentYtPage + 1) * CHUNK_SIZE)); i++) {
    var isExcludedAlready = wholeSpreadsheet.getSheetByName(currentSheetName).getRange(i, exclusionStatusRange.getColumn()) == EXCLUSION_STATUS_VALUES.EXCLUDED;
    var hasChannelId = !wholeSpreadsheet.getSheetByName(currentSheetName).getRange(i, channelIdsColumn).isBlank();
    if (!isExcludedAlready && hasChannelId) {
      var currentChannelId = ((wholeSpreadsheet.getSheetByName(currentSheetName).getRange(i, channelIdsColumn)).getValue());
      channelIdToRowId[currentChannelId] = (i - channelIdsFirstRow);
    }
  }
  Logger.log("Adding YT data");
  callYtChannelAPI(channelIdToRowId, currentSheetName);
}

/**
 *  https://developers.google.com/youtube/v3/docs/channels
 */
function callYtChannelAPI(channelIdToRowId, currentSheetName) {
  var channelIds = Object.keys(channelIdToRowId);

  if (channelIds.length == 0) {
    Logger.log("There are no channels waiting for metadata");
    SpreadsheetApp.getActiveSpreadsheet().toast('Nothing to add', "üéû", TOAST_DISPALY_TIME);
  }

  var subCountFilter = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.SUB_COUNT_FILTER).getValue();
  var subCountOperator = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.SUB_COUNT_OPERATOR).getValue();
  var viewCountFilter = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIEW_COUNT_FILTER).getValue();
  var viewCountOperator = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIEW_COUNT_OPERATOR).getValue();
  var languageFilter = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.LANGUAGE_FILTER).getValue();
  var languageOperator = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.LANGUAGE_OPERATOR).getValue();
  var videoCountFilter = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIDEO_COUNT_FILTER).getValue();
  var videoCountOperator = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIDEO_COUNT_OPERATOR).getValue();
  var publishedDateFilter = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.PUBLISHED_DATE_FILTER).getValue();
  var publishedDateOperator = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.PUBLISHED_DATE_OPERATOR).getValue();
  var countryFilter = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.COUNTRY_FILTER).getValue();
  var countryOperator = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.COUNTRY_OPERATOR).getValue();
  var languageEnFilter = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.LANGUAGE_EN_FILTER).getValue();

  if (!(subCountFilter | viewCountFilter | languageFilter | videoCountFilter | publishedDateFilter | countryFilter | !languageEnFilter)) {
    SpreadsheetApp.getActiveSpreadsheet().toast('No YT filters', "üí° Warning!", TOAST_DISPALY_TIME);
  }

  var currentPageMetadata = YouTube.Channels.list('id, snippet, statistics, brandingSettings', {
    id: channelIds.join()
  }).getItems();

  if (!currentPageMetadata || currentPageMetadata.length == 0) {
    currentPageMetadata = [];
  }

  currentPageMetadata = currentPageMetadata.filter(item =>
    ((filterYtMetadata(item.statistics.viewCount, viewCountFilter, viewCountOperator)) &&
      (filterYtMetadata(item.statistics.subscriberCount, subCountFilter, subCountOperator)) &&
      (filterYtMetadata(item.brandingSettings.channel.defaultLanguage, languageFilter, languageOperator)) &&
      (filterYtMetadata(item.statistics.videoCount, videoCountFilter, videoCountOperator)) &&
      (filterYtMetadata(item.snippet.publishedAt, publishedDateFilter, publishedDateOperator)) &&
      (filterYtMetadata(item.snippet.country, countryFilter, countryOperator))) &&
    (languageEnFilter != false || item.snippet.title == null || item.snippet.title == "" || isNotEnglishCharacters(item.snippet.title)));

  setYtMetadataHeaders(currentSheetName);
  var checkboxRange = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.USER_EXCLUSION_CHECKBOX);

  for (var j in currentPageMetadata) {
    var channel = currentPageMetadata[j];
    var position = channelIdToRowId[channel.id];
    fillTableWithYyData(currentSheetName, checkboxRange, position, channel);
  }

  if (currentPageMetadata.length > 0) {
    wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.IS_YT_NEW).setValue(CONSTS.NEW);
  }
}

function setYtMetadataHeaders(currentSheetName) {
  // Set YT Metadata headers
  var headersRange = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.SUB_COUNT).offset(-1, 0);
  if (!headersRange.isBlank()) {
    return
  }
  headersRange.setValue(CONSTS.SUB_COUNT);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIEW_COUNT).offset(-1, 0).setValue(CONSTS.VIEW_COUNT);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.LANG).offset(-1, 0).setValue(CONSTS.LANG);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIDEO_COUNT).offset(-1, 0).setValue(CONSTS.VIDEO_COUNT);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.PUBLISHED_DATE).offset(-1, 0).setValue(CONSTS.PUBLISHED_DATE);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_ID_DEBUG).offset(-1, 0).setValue(CONSTS.YT_ID_DEBUG);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.COUNTRY).offset(-1, 0).setValue(CONSTS.COUNTRY);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.LANGUAGE_EN_TITLE).offset(-1, 0).setValue(CONSTS.LANGUAGE_EN_TITLE);
}

function fillTableWithYyData(currentSheetName, checkboxRange, position, channel) {

  checkboxRange.offset(position, 0).insertCheckboxes();
  checkboxRange.offset(position, 0).setValue(isAutomaticTab(currentSheetName) ? true : false);

  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YOUTUBE_TIMESTAMP).offset(position, 0).setValue(Utilities.formatDate(new Date(), SpreadsheetApp.getActive().getSpreadsheetTimeZone(), "yyyy-MM-dd HH:mm"));
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.IS_YT_NEW).getValue();
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.YT_ID_DEBUG).offset(position, 0).setValue(channel.id);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.SUB_COUNT).offset(position, 0).setValue(channel.statistics.subscriberCount);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIEW_COUNT).offset(position, 0).setValue(channel.statistics.viewCount);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.LANG).offset(position, 0).setValue(channel.brandingSettings.channel.defaultLanguage);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.VIDEO_COUNT).offset(position, 0).setValue(channel.statistics.videoCount);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.PUBLISHED_DATE).offset(position, 0).setValue(channel.snippet.publishedAt);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.COUNTRY).offset(position, 0).setValue(channel.snippet.country);
  wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.LANGUAGE_EN_TITLE).offset(position, 0).setValue(isNotEnglishCharacters(channel.snippet.title) + ": " + channel.snippet.title);
}

function removeTriggersByName(functionName) {
  try {
    var triggers = ScriptApp.getProjectTriggers();
    for (var i = 0; i < triggers.length; i++) {
      // delete all triggers
      if (triggers[i].getHandlerFunction().toString() == functionName) {
        ScriptApp.deleteTrigger(triggers[i]);
      }
    }
  }
  catch (e) {
    SpreadsheetApp.getActiveSpreadsheet().toast('Failed to cleanup triggers', 'üí° Error!', TOAST_DISPALY_TIME);
  };
}

function removeAllTriggers() {
  try {
    var triggers = ScriptApp.getProjectTriggers();
    for (var i = 0; i < triggers.length; i++) {
      // delete all triggers
      ScriptApp.deleteTrigger(triggers[i]);
    }
  }
  catch (e) {
    SpreadsheetApp.getActiveSpreadsheet().toast('Failed to cleanup triggers', 'üí° Error!', TOAST_DISPALY_TIME);
  };
}


//Generating all the create exclusion statements for each channel ID
function createPayload(idsToExclude) {
  var payload = {
    "operations": [
    ]
  };
  //For each channel ID need to create a new "create" object
  for (let i = 0; i < idsToExclude.length; i++) {
    payload.operations[i] = {
      create: {
        youtubeChannel: {
          channelId: String(idsToExclude[i])
        }
      }
    }
  }
  return payload
}

//Excludes channels at the Account level for channel IDs that have been selected 
function callExcludeApi(createdPayload, currentSheetName, channelIdToRowId) {
  Logger.log("Calling Exclude API");

  var nextPageToken = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.GADS_NEXT_PAGE_TOKEN).getValue().toString().trim();
  if (nextPageToken.length != 0 && nextPageToken > 0) {
    payload['pageToken'] = nextPageToken;
  }

  var customerId = currentSheetName.substring(0, currentSheetName.indexOf('_'));
  var channelIdToRowId = channelIdToRowId;
  const SEARCH_URL = `https://googleads.googleapis.com/${API_VERSION}/customers/${customerId}/customerNegativeCriteria:mutate`;
  var payload = createdPayload;
  var request = {
    method: 'post',
    headers: {
      "Authorization": 'Bearer ' + OAUTH_TOKEN,
      "developer-token": DEVELOPER_TOKEN,
    },
    'contentType': 'application/json',
    'payload': JSON.stringify(payload),
    muteHttpExceptions: true // Set to true for full exceptions in logs
  };
  if ((wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.MCC_ID).getValue()).toString().trim().length != 0) {
    request.headers["login-customer-id"] = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.MCC_ID).getValue().toString();
  }

  var response = UrlFetchApp.fetch(SEARCH_URL, request);
  var responseCode = response.getResponseCode();

  var exclusionStatusRange = wholeSpreadsheet.getRangeByName(currentSheetName + '!' + CONSTS.EXCLUSION_STATUS)
  if (responseCode != 200) {
    SpreadsheetApp.getActiveSpreadsheet().toast('responseCode != 200', 'üí° Warning!', TOAST_DISPALY_TIME);
  }
  var reportResult = JSON.parse(response.getContentText());
  if (reportResult.hasOwnProperty('error')) {
    Logger.log("Error: ")
    Logger.log(JSON.stringify(reportResult['error']));
    SpreadsheetApp.getActiveSpreadsheet().toast(JSON.stringify(reportResult['error']['message']), 'Exclusion Error', -1);
    for (var channelId in channelIdToRowId) {
      var position = channelIdToRowId[channelId];
      exclusionStatusRange.offset(position, 0, 1, 1).setValue("Exclusion Error " + JSON.stringify(reportResult['error']['details'][0]['reason']));
    };
  }
  else {
    Logger.log("Successfully excluded channels.");
    //Excluded successfully. Look up channel ID in sheet, set value "Excluded" in status column

    Object.entries(channelIdToRowId).forEach(function (pair) {
      var newLine = pair[1] - exclusionStatusRange.getRow();
      exclusionStatusRange.offset(newLine, 0, 1, 1).setValue(EXCLUSION_STATUS_VALUES.EXCLUDED);
    });
  };
}